var tipuesearch = {"pages":[{"title":" ","text":"Smart Pointers _________                      __                 \n /   _____/ _____ _____ ________/  |_               \n \\_____  \\ /     \\\\__  \\\\_  __ \\   __\\              \n /        \\  Y Y  \\/ __ \\|  | \\/|  |                \n/_______  /__|_|  (____  /__|   |__|                \n        \\/      \\/     \\/                           \n__________      .__        __                       \n\\______   \\____ |__| _____/  |_  ___________  ______\n |     ___/  _ \\|  |/    \\   __\\/ __ \\_  __ \\/  ___/\n |    |  (  <_> )  |   |  \\  | \\  ___/|  | \\/\\___ \\ \n |____|   \\____/|__|___|  /__|  \\___  >__|  /____  >\n                        \\/          \\/           \\/ \n                             \\/ Overview The Smart-Pointers library tracks references to program resources and automates\nthe freeing of those resources if and only if the reference count drops to zero.\nMost commonly, the reference is a pointer and the resource is memory.  In that\ncontext, Smart-Pointers help to prevent memory leaks and dangling pointers, which\ncommonly causes programs to crash due to memory limitations or segmentation faults, \nrespectively. To use Smart-Pointers, define a non-abstract derived type that Extends Smart Pointer's sp_smart_pointer_t type, Implements the inherited free deferred binding, and Invokes the inherited start_count procedure inside object constructors. You can then use intrinsic assignments to copy instances of a sp_smart_pointer_t child type, resulting in a shallow copy with the advantage that the target\nwill be finalized only when it becomes safe to do so. Example See the example folder for a demonstration of the use of Smart-Pointers. Background For more background on the design philosophy and the internal mechanics of Smart\nPointers, see Rouson et al. (see 1 , 2 , 3 ).  This repository's code\noriginated from refactoring the code in those publications to use more up-to-date\ncoding conventions.  For example, this repository separates interface bodies\ninto modules and procedure definitions into submodules.  This repository also\nuses more descriptive nomenclature for the types and procedures. This repository also adds\n1. A Fortran Package Manager build system,\n2. Tests based on the Veggies unit-testing framework,\n3. Documentation generated by [ ford ] and deployed to the web via GitHub Actions, and\n4. Quality control via continuous integration testing using GitHub Actions. Supported Compilers Correct execution of the Smart Pointers library depends critically on comprehensive\ncompiler support for type finalization.  The unit test suite verifies the relevant\ncompiler standard-conformance, including a test for each scenario in which the\nthe Fortran 2018 standard requires that an object be finalized.  The table below\nsummarizes the observed compiler behaviors: Compiler Test failures Version tested NAG 0 nagfor 7.1 Build 7113 IBM 1 xlf2003_r 17.1.0 on AIX Intel 2 ifort 2021.5.0 Build 20211109_000000 NVIDIA 2 nvfortran 22.7-0 Cray 3 ftn 13.0.1 GCC 6 gfortran 12.2.0 AMD N.A. (see Note 1.) flang 13.0.0 (AOCC_3.2.0-Build#128 2021_11_12) LLVM N.A. (see Note 2.) git commit f5253058144aca1e9fcacd (9/20/2022) Notes 1. Fails to build due to an internal compiler error (ICE).\n2. Fails to build due to type finalization not yet being supported. See the test suite README.md for more details on each compiler's test\nresults. Downloading, Building, and Testing On Linux, macOS, or Windows Subsystem for Linux, download, build, and test with\nthe following shell commands: git clone https://github.com/sourceryinstitute/smart-pointer\ncd smart-pointer followed by one of the commands below corresponding to your compiler choice. Numerical Algorithms Group fpm test --compiler nagfor --flag -fpp Intel fpm test --compiler ifort IBM fpm test --archiver ar --compiler xlf2008_r --flag -DXLF GCC fpm test NVIDIA fpm test --compiler nvfortran --flag -Mpreprocess AMD fpm test --compiler flang --flag -cpp Documentation See Smart Pointer's GitHub Pages site for HTML documentation generated with [ ford ].\nSee the doc/ subdirectory for a PlantUML script that generates the Unified Modeling Language (UML) \nclass diagram below of the three derived types in Smart-Pointers. Developer Info Sourcery Institute","tags":"home","loc":"index.html"},{"title":"sp_resource_t –  ","text":"type, public, abstract :: sp_resource_t Inherited by type~~sp_resource_t~~InheritedByGraph type~sp_resource_t sp_resource_t type~sp_reference_counter_t sp_reference_counter_t type~sp_reference_counter_t->type~sp_resource_t object_ type~sp_smart_pointer_t sp_smart_pointer_t type~sp_smart_pointer_t->type~sp_resource_t type~sp_smart_pointer_t->type~sp_reference_counter_t counter Help × Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from a derived type to the parent type which it\n    extends. Dashed arrows point from a derived type to the other\n    types it contains as a components, with a label listing the name(s) of\n    said component(s). Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Type-Bound Procedures free Type-Bound Procedures procedure( free_interface ), public, deferred :: free subroutine free_interface(self) Prototype Arguments Type Intent Optional Attributes Name class( sp_resource_t ), intent(inout) :: self","tags":"","loc":"type/sp_resource_t.html"},{"title":"sp_reference_counter_t –  ","text":"type, public :: sp_reference_counter_t Inherits type~~sp_reference_counter_t~~InheritsGraph type~sp_reference_counter_t sp_reference_counter_t type~sp_resource_t sp_resource_t type~sp_reference_counter_t->type~sp_resource_t object_ Help × Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from a derived type to the parent type which it\n    extends. Dashed arrows point from a derived type to the other\n    types it contains as a components, with a label listing the name(s) of\n    said component(s). Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Inherited by type~~sp_reference_counter_t~~InheritedByGraph type~sp_reference_counter_t sp_reference_counter_t type~sp_smart_pointer_t sp_smart_pointer_t type~sp_smart_pointer_t->type~sp_reference_counter_t counter Help × Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from a derived type to the parent type which it\n    extends. Dashed arrows point from a derived type to the other\n    types it contains as a components, with a label listing the name(s) of\n    said component(s). Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Variables count_ object_ Constructor sp_reference_counter_t Finalization Procedures finalize Type-Bound Procedures assign_sp_reference_counter assignment(=) grab reference_count release Components Type Visibility Attributes Name Initial integer, private, pointer :: count_ => null() class( sp_resource_t ), private, pointer :: object_ => null() Constructor public interface sp_reference_counter_t private module function construct(object) result(sp_reference_counter) Arguments Type Intent Optional Attributes Name class( sp_resource_t ), intent(in) :: object Return Value type( sp_reference_counter_t ) Finalization Procedures final :: finalize private subroutine finalize (self) Arguments Type Intent Optional Attributes Name type( sp_reference_counter_t ), intent(inout) :: self Type-Bound Procedures procedure, public :: assign_sp_reference_counter interface private module module subroutine assign_sp_reference_counter(lhs, rhs) Implementation → Arguments Type Intent Optional Attributes Name class( sp_reference_counter_t ), intent(inout) :: lhs class( sp_reference_counter_t ), intent(in) :: rhs generic, public :: assignment(=) => assign_sp_reference_counter private interface assign_sp_reference_counter () Arguments None procedure, public, non_overridable :: grab interface private module module subroutine grab(self) Implementation → Arguments Type Intent Optional Attributes Name class( sp_reference_counter_t ), intent(inout) :: self procedure, public :: reference_count interface private pure module module function reference_count(self) result(counter) Implementation → Arguments Type Intent Optional Attributes Name class( sp_reference_counter_t ), intent(in) :: self Return Value integer procedure, public, non_overridable :: release interface private module module subroutine release(self) Implementation → Arguments Type Intent Optional Attributes Name class( sp_reference_counter_t ), intent(inout) :: self","tags":"","loc":"type/sp_reference_counter_t.html"},{"title":"sp_smart_pointer_t –  ","text":"type, public, abstract, extends( sp_resource_t ) :: sp_smart_pointer_t Inherits type~~sp_smart_pointer_t~~InheritsGraph type~sp_smart_pointer_t sp_smart_pointer_t type~sp_reference_counter_t sp_reference_counter_t type~sp_smart_pointer_t->type~sp_reference_counter_t counter type~sp_resource_t sp_resource_t type~sp_smart_pointer_t->type~sp_resource_t type~sp_reference_counter_t->type~sp_resource_t object_ Help × Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from a derived type to the parent type which it\n    extends. Dashed arrows point from a derived type to the other\n    types it contains as a components, with a label listing the name(s) of\n    said component(s). Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Variables counter Type-Bound Procedures free reference_count release_handle start_counter Components Type Visibility Attributes Name Initial type( sp_reference_counter_t ), private :: counter Type-Bound Procedures procedure( free_interface ), public, deferred :: free subroutine free_interface(self) Prototype Arguments Type Intent Optional Attributes Name class( sp_resource_t ), intent(inout) :: self procedure, public :: reference_count interface private pure module module function reference_count(self) result(counter) Implementation → Arguments Type Intent Optional Attributes Name class( sp_smart_pointer_t ), intent(in) :: self Return Value integer procedure, public, non_overridable :: release_handle interface private module module subroutine release_handle(self) Implementation → Arguments Type Intent Optional Attributes Name class( sp_smart_pointer_t ), intent(inout) :: self procedure, public, non_overridable :: start_counter interface private module module subroutine start_counter(self) Implementation → Arguments Type Intent Optional Attributes Name class( sp_smart_pointer_t ), intent(inout) :: self","tags":"","loc":"type/sp_smart_pointer_t.html"},{"title":"free_interface – ","text":"abstract interface private subroutine free_interface(self) Arguments Type Intent Optional Attributes Name class( sp_resource_t ), intent(inout) :: self","tags":"","loc":"interface/free_interface.html"},{"title":"finalize – ","text":"private subroutine finalize(self) Arguments Type Intent Optional Attributes Name type( sp_reference_counter_t ), intent(inout) :: self Contents None","tags":"","loc":"proc/finalize.html"},{"title":"sp_reference_counter_t – ","text":"public interface sp_reference_counter_t Contents Functions construct Functions private module function construct(object) result(sp_reference_counter) Arguments Type Intent Optional Attributes Name class( sp_resource_t ), intent(in) :: object Return Value type( sp_reference_counter_t )","tags":"","loc":"interface/sp_reference_counter_t.html"},{"title":"assign_sp_reference_counter – ","text":"interface Calls interface~~assign_sp_reference_counter~~CallsGraph interface~assign_sp_reference_counter assign_sp_reference_counter proc~assign_sp_reference_counter assign_sp_reference_counter interface~assign_sp_reference_counter->proc~assign_sp_reference_counter Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. private module module subroutine assign_sp_reference_counter(lhs, rhs) Implementation → Arguments Type Intent Optional Attributes Name class( sp_reference_counter_t ), intent(inout) :: lhs class( sp_reference_counter_t ), intent(in) :: rhs","tags":"","loc":"interface/assign_sp_reference_counter.html"},{"title":"grab – ","text":"interface Calls interface~~grab~~CallsGraph interface~grab grab proc~grab grab interface~grab->proc~grab interface~assert assert proc~grab->interface~assert proc~assert assert interface~assert->proc~assert Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. private module module subroutine grab(self) Implementation → Arguments Type Intent Optional Attributes Name class( sp_reference_counter_t ), intent(inout) :: self","tags":"","loc":"interface/grab.html"},{"title":"reference_count – ","text":"interface Calls interface~~reference_count~~CallsGraph interface~reference_count reference_count proc~reference_count reference_count interface~reference_count->proc~reference_count interface~assert assert proc~reference_count->interface~assert proc~assert assert interface~assert->proc~assert Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. private pure module module function reference_count(self) result(counter) Implementation → Arguments Type Intent Optional Attributes Name class( sp_reference_counter_t ), intent(in) :: self Return Value integer","tags":"","loc":"interface/reference_count.html"},{"title":"release – ","text":"interface Calls interface~~release~~CallsGraph interface~release release proc~release release interface~release->proc~release interface~assert assert proc~release->interface~assert proc~assert assert interface~assert->proc~assert Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. private module module subroutine release(self) Implementation → Arguments Type Intent Optional Attributes Name class( sp_reference_counter_t ), intent(inout) :: self","tags":"","loc":"interface/release.html"},{"title":"assert – ","text":"interface Calls interface~~assert~~CallsGraph interface~assert assert proc~assert assert interface~assert->proc~assert Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Called by interface~~assert~~CalledByGraph interface~assert assert proc~grab grab proc~grab->interface~assert proc~reference_count reference_count proc~reference_count->interface~assert proc~release release proc~release->interface~assert interface~grab grab interface~grab->proc~grab interface~reference_count reference_count interface~reference_count->proc~reference_count interface~release release interface~release->proc~release Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. public pure module module subroutine assert(assertion, description) Implementation → Arguments Type Intent Optional Attributes Name logical, intent(in) :: assertion character(len=*), intent(in) :: description Description Error terminate on .false. assertion with the stop code given by description\nWith IBM XL Fortran, the stop code is an integer due to for character stop codes being unsupported.","tags":"","loc":"interface/assert.html"},{"title":"reference_count – ","text":"interface Calls interface~~reference_count~2~~CallsGraph interface~reference_count~2 reference_count proc~reference_count~2 reference_count interface~reference_count~2->proc~reference_count~2 Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. private pure module module function reference_count(self) result(counter) Implementation → Arguments Type Intent Optional Attributes Name class( sp_smart_pointer_t ), intent(in) :: self Return Value integer","tags":"","loc":"interface/reference_count~2.html"},{"title":"release_handle – ","text":"interface Calls interface~~release_handle~~CallsGraph interface~release_handle release_handle proc~release_handle release_handle interface~release_handle->proc~release_handle Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. private module module subroutine release_handle(self) Implementation → Arguments Type Intent Optional Attributes Name class( sp_smart_pointer_t ), intent(inout) :: self","tags":"","loc":"interface/release_handle.html"},{"title":"start_counter – ","text":"interface Calls interface~~start_counter~~CallsGraph interface~start_counter start_counter proc~start_counter start_counter interface~start_counter->proc~start_counter Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. private module module subroutine start_counter(self) Implementation → Arguments Type Intent Optional Attributes Name class( sp_smart_pointer_t ), intent(inout) :: self","tags":"","loc":"interface/start_counter.html"},{"title":"assert – ","text":"module procedure assert pure module module subroutine assert(assertion, description) Interface → Arguments Type Intent Optional Attributes Name logical, intent(in) :: assertion character(len=*), intent(in) :: description Called by proc~~assert~~CalledByGraph proc~assert assert interface~assert assert interface~assert->proc~assert proc~grab grab proc~grab->interface~assert proc~reference_count reference_count proc~reference_count->interface~assert proc~release release proc~release->interface~assert interface~grab grab interface~grab->proc~grab interface~reference_count reference_count interface~reference_count->proc~reference_count interface~release release interface~release->proc~release Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/assert.html"},{"title":"reference_count – ","text":"module procedure reference_count pure module module function reference_count(self) result(counter) Interface → Arguments Type Intent Optional Attributes Name class( sp_smart_pointer_t ), intent(in) :: self Return Value integer Called by proc~~reference_count~2~~CalledByGraph proc~reference_count~2 reference_count interface~reference_count~2 reference_count interface~reference_count~2->proc~reference_count~2 Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/reference_count~2.html"},{"title":"release_handle – ","text":"module procedure release_handle module module subroutine release_handle(self) Interface → Arguments Type Intent Optional Attributes Name class( sp_smart_pointer_t ), intent(inout) :: self Called by proc~~release_handle~~CalledByGraph proc~release_handle release_handle interface~release_handle release_handle interface~release_handle->proc~release_handle Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/release_handle.html"},{"title":"start_counter – ","text":"module procedure start_counter module module subroutine start_counter(self) Interface → Arguments Type Intent Optional Attributes Name class( sp_smart_pointer_t ), intent(inout) :: self Called by proc~~start_counter~~CalledByGraph proc~start_counter start_counter interface~start_counter start_counter interface~start_counter->proc~start_counter Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/start_counter.html"},{"title":"assign_sp_reference_counter – ","text":"module procedure assign_sp_reference_counter module module subroutine assign_sp_reference_counter(lhs, rhs) Interface → Arguments Type Intent Optional Attributes Name class( sp_reference_counter_t ), intent(inout) :: lhs class( sp_reference_counter_t ), intent(in) :: rhs Called by proc~~assign_sp_reference_counter~~CalledByGraph proc~assign_sp_reference_counter assign_sp_reference_counter interface~assign_sp_reference_counter assign_sp_reference_counter interface~assign_sp_reference_counter->proc~assign_sp_reference_counter Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/assign_sp_reference_counter.html"},{"title":"construct – ","text":"module procedure construct module procedure construct() Arguments None Contents None","tags":"","loc":"proc/construct.html"},{"title":"grab – ","text":"module procedure grab module module subroutine grab(self) Interface → Arguments Type Intent Optional Attributes Name class( sp_reference_counter_t ), intent(inout) :: self Calls proc~~grab~~CallsGraph proc~grab grab interface~assert assert proc~grab->interface~assert proc~assert assert interface~assert->proc~assert Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Called by proc~~grab~~CalledByGraph proc~grab grab interface~grab grab interface~grab->proc~grab Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/grab.html"},{"title":"reference_count – ","text":"module procedure reference_count pure module module function reference_count(self) result(counter) Interface → Arguments Type Intent Optional Attributes Name class( sp_reference_counter_t ), intent(in) :: self Return Value integer Calls proc~~reference_count~~CallsGraph proc~reference_count reference_count interface~assert assert proc~reference_count->interface~assert proc~assert assert interface~assert->proc~assert Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Called by proc~~reference_count~~CalledByGraph proc~reference_count reference_count interface~reference_count reference_count interface~reference_count->proc~reference_count Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/reference_count.html"},{"title":"release – ","text":"module procedure release module module subroutine release(self) Interface → Arguments Type Intent Optional Attributes Name class( sp_reference_counter_t ), intent(inout) :: self Calls proc~~release~~CallsGraph proc~release release interface~assert assert proc~release->interface~assert proc~assert assert interface~assert->proc~assert Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Called by proc~~release~~CalledByGraph proc~release release interface~release release interface~release->proc~release Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/release.html"},{"title":"smart_pointer_m – ","text":"Uses sp_smart_pointer_m module~~smart_pointer_m~~UsesGraph module~smart_pointer_m smart_pointer_m module~sp_smart_pointer_m sp_smart_pointer_m module~smart_pointer_m->module~sp_smart_pointer_m module~sp_resource_m sp_resource_m module~sp_smart_pointer_m->module~sp_resource_m module~sp_reference_counter_m sp_reference_counter_m module~sp_smart_pointer_m->module~sp_reference_counter_m module~sp_reference_counter_m->module~sp_resource_m Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"module/smart_pointer_m.html"},{"title":"sp_resource_m – ","text":"Used by module~~sp_resource_m~~UsedByGraph module~sp_resource_m sp_resource_m module~sp_smart_pointer_m sp_smart_pointer_m module~sp_smart_pointer_m->module~sp_resource_m module~sp_reference_counter_m sp_reference_counter_m module~sp_smart_pointer_m->module~sp_reference_counter_m module~sp_reference_counter_m->module~sp_resource_m module~smart_pointer_m smart_pointer_m module~smart_pointer_m->module~sp_smart_pointer_m module~sp_reference_counter_s sp_reference_counter_s module~sp_reference_counter_s->module~sp_reference_counter_m module~sp_smart_pointer_s sp_smart_pointer_s module~sp_smart_pointer_s->module~sp_smart_pointer_m Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Abstract Interfaces free_interface Derived Types sp_resource_t Abstract Interfaces abstract interface private subroutine free_interface(self) Arguments Type Intent Optional Attributes Name class( sp_resource_t ), intent(inout) :: self Derived Types type, public, abstract :: sp_resource_t Type-Bound Procedures procedure(free_interface), public :: free","tags":"","loc":"module/sp_resource_m.html"},{"title":"sp_reference_counter_m – ","text":"Uses sp_resource_m module~~sp_reference_counter_m~~UsesGraph module~sp_reference_counter_m sp_reference_counter_m module~sp_resource_m sp_resource_m module~sp_reference_counter_m->module~sp_resource_m Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Used by Descendants: sp_reference_counter_s module~~sp_reference_counter_m~~UsedByGraph module~sp_reference_counter_m sp_reference_counter_m module~sp_smart_pointer_m sp_smart_pointer_m module~sp_smart_pointer_m->module~sp_reference_counter_m module~sp_reference_counter_s sp_reference_counter_s module~sp_reference_counter_s->module~sp_reference_counter_m module~smart_pointer_m smart_pointer_m module~smart_pointer_m->module~sp_smart_pointer_m module~sp_smart_pointer_s sp_smart_pointer_s module~sp_smart_pointer_s->module~sp_smart_pointer_m Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Interfaces sp_reference_counter_t assign_sp_reference_counter grab reference_count release Derived Types sp_reference_counter_t Subroutines finalize Interfaces public interface sp_reference_counter_t private module function construct(object) result(sp_reference_counter) Arguments Type Intent Optional Attributes Name class( sp_resource_t ), intent(in) :: object Return Value type( sp_reference_counter_t ) interface private module module subroutine assign_sp_reference_counter(lhs, rhs) Implementation → Arguments Type Intent Optional Attributes Name class( sp_reference_counter_t ), intent(inout) :: lhs class( sp_reference_counter_t ), intent(in) :: rhs interface private module module subroutine grab(self) Implementation → Arguments Type Intent Optional Attributes Name class( sp_reference_counter_t ), intent(inout) :: self interface private pure module module function reference_count(self) result(counter) Implementation → Arguments Type Intent Optional Attributes Name class( sp_reference_counter_t ), intent(in) :: self Return Value integer interface private module module subroutine release(self) Implementation → Arguments Type Intent Optional Attributes Name class( sp_reference_counter_t ), intent(inout) :: self Derived Types type, public :: sp_reference_counter_t Components Type Visibility Attributes Name Initial integer, private, pointer :: count_ => null() class( sp_resource_t ), private, pointer :: object_ => null() Constructor private module function construct (object) Finalizations Procedures final :: finalize Type-Bound Procedures procedure, public :: assign_sp_reference_counter generic, public :: assignment(=) => assign_sp_reference_counter procedure, public, non_overridable :: grab procedure, public :: reference_count procedure, public, non_overridable :: release Subroutines private subroutine finalize (self) Arguments Type Intent Optional Attributes Name type( sp_reference_counter_t ), intent(inout) :: self","tags":"","loc":"module/sp_reference_counter_m.html"},{"title":"assert_m – ","text":"Enforce logical assertions that can be toggled on/off at compile-time\nTo turn off assertions, building with the flag -DUSE_ASSERTIONS=.false. Used by Descendants: assert_s module~~assert_m~~UsedByGraph module~assert_m assert_m module~sp_reference_counter_s sp_reference_counter_s module~sp_reference_counter_s->module~assert_m module~assert_s assert_s module~assert_s->module~assert_m Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Variables enforce_assertions Interfaces assert Variables Type Visibility Attributes Name Initial logical, private, parameter :: enforce_assertions = .true. Interfaces interface public pure module module subroutine assert(assertion, description) Implementation → Error terminate on .false. assertion with the stop code given by description\nWith IBM XL Fortran, the stop code is an integer due to for character stop codes being unsupported. Arguments Type Intent Optional Attributes Name logical, intent(in) :: assertion character(len=*), intent(in) :: description","tags":"","loc":"module/assert_m.html"},{"title":"sp_smart_pointer_m – ","text":"Uses sp_resource_m sp_reference_counter_m module~~sp_smart_pointer_m~~UsesGraph module~sp_smart_pointer_m sp_smart_pointer_m module~sp_resource_m sp_resource_m module~sp_smart_pointer_m->module~sp_resource_m module~sp_reference_counter_m sp_reference_counter_m module~sp_smart_pointer_m->module~sp_reference_counter_m module~sp_reference_counter_m->module~sp_resource_m Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Used by Descendants: sp_smart_pointer_s module~~sp_smart_pointer_m~~UsedByGraph module~sp_smart_pointer_m sp_smart_pointer_m module~smart_pointer_m smart_pointer_m module~smart_pointer_m->module~sp_smart_pointer_m module~sp_smart_pointer_s sp_smart_pointer_s module~sp_smart_pointer_s->module~sp_smart_pointer_m Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Interfaces reference_count release_handle start_counter Derived Types sp_smart_pointer_t Interfaces interface private pure module module function reference_count(self) result(counter) Implementation → Arguments Type Intent Optional Attributes Name class( sp_smart_pointer_t ), intent(in) :: self Return Value integer interface private module module subroutine release_handle(self) Implementation → Arguments Type Intent Optional Attributes Name class( sp_smart_pointer_t ), intent(inout) :: self interface private module module subroutine start_counter(self) Implementation → Arguments Type Intent Optional Attributes Name class( sp_smart_pointer_t ), intent(inout) :: self Derived Types type, public, abstract, extends( sp_resource_t ) :: sp_smart_pointer_t Components Type Visibility Attributes Name Initial type( sp_reference_counter_t ), private :: counter Type-Bound Procedures procedure(free_interface), public :: free procedure, public :: reference_count procedure, public, non_overridable :: release_handle procedure, public, non_overridable :: start_counter","tags":"","loc":"module/sp_smart_pointer_m.html"},{"title":"assert_s – ","text":"Uses Ancestors: assert_m module~~assert_s~~UsesGraph module~assert_s assert_s module~assert_m assert_m module~assert_s->module~assert_m Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Module Procedures assert Module Procedures module procedure assert pure module module subroutine assert(assertion, description) Interface → Arguments Type Intent Optional Attributes Name logical, intent(in) :: assertion character(len=*), intent(in) :: description","tags":"","loc":"module/assert_s.html"},{"title":"sp_smart_pointer_s – ","text":"Uses Ancestors: sp_smart_pointer_m module~~sp_smart_pointer_s~~UsesGraph module~sp_smart_pointer_s sp_smart_pointer_s module~sp_smart_pointer_m sp_smart_pointer_m module~sp_smart_pointer_s->module~sp_smart_pointer_m module~sp_resource_m sp_resource_m module~sp_smart_pointer_m->module~sp_resource_m module~sp_reference_counter_m sp_reference_counter_m module~sp_smart_pointer_m->module~sp_reference_counter_m module~sp_reference_counter_m->module~sp_resource_m Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Module Procedures reference_count release_handle start_counter Module Procedures module procedure reference_count pure module module function reference_count(self) result(counter) Interface → Arguments Type Intent Optional Attributes Name class( sp_smart_pointer_t ), intent(in) :: self Return Value integer module procedure release_handle module module subroutine release_handle(self) Interface → Arguments Type Intent Optional Attributes Name class( sp_smart_pointer_t ), intent(inout) :: self module procedure start_counter module module subroutine start_counter(self) Interface → Arguments Type Intent Optional Attributes Name class( sp_smart_pointer_t ), intent(inout) :: self","tags":"","loc":"module/sp_smart_pointer_s.html"},{"title":"sp_reference_counter_s – ","text":"Uses assert_m Ancestors: sp_reference_counter_m module~~sp_reference_counter_s~~UsesGraph module~sp_reference_counter_s sp_reference_counter_s module~assert_m assert_m module~sp_reference_counter_s->module~assert_m module~sp_reference_counter_m sp_reference_counter_m module~sp_reference_counter_s->module~sp_reference_counter_m module~sp_resource_m sp_resource_m module~sp_reference_counter_m->module~sp_resource_m Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Module Procedures assign_sp_reference_counter construct grab reference_count release Module Procedures module procedure assign_sp_reference_counter module module subroutine assign_sp_reference_counter(lhs, rhs) Interface → Arguments Type Intent Optional Attributes Name class( sp_reference_counter_t ), intent(inout) :: lhs class( sp_reference_counter_t ), intent(in) :: rhs module procedure construct module procedure construct() Arguments None module procedure grab module module subroutine grab(self) Interface → Arguments Type Intent Optional Attributes Name class( sp_reference_counter_t ), intent(inout) :: self module procedure reference_count pure module module function reference_count(self) result(counter) Interface → Arguments Type Intent Optional Attributes Name class( sp_reference_counter_t ), intent(in) :: self Return Value integer module procedure release module module subroutine release(self) Interface → Arguments Type Intent Optional Attributes Name class( sp_reference_counter_t ), intent(inout) :: self","tags":"","loc":"module/sp_reference_counter_s.html"},{"title":"smart_pointer_m.f90 – ","text":"This file depends on sourcefile~~smart_pointer_m.f90~~EfferentGraph sourcefile~smart_pointer_m.f90 smart_pointer_m.f90 sourcefile~sp_smart_pointer_m.f90 sp_smart_pointer_m.f90 sourcefile~smart_pointer_m.f90->sourcefile~sp_smart_pointer_m.f90 sourcefile~sp_resource_m.f90 sp_resource_m.f90 sourcefile~sp_smart_pointer_m.f90->sourcefile~sp_resource_m.f90 sourcefile~sp_reference_counter_m.f90 sp_reference_counter_m.f90 sourcefile~sp_smart_pointer_m.f90->sourcefile~sp_reference_counter_m.f90 sourcefile~sp_reference_counter_m.f90->sourcefile~sp_resource_m.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Modules smart_pointer_m Source Code smart_pointer_m.f90 Source Code module smart_pointer_m use sp_smart_pointer_m , only : sp_smart_pointer_t implicit none end module","tags":"","loc":"sourcefile/smart_pointer_m.f90.html"},{"title":"assert_s.F90 – ","text":"This file depends on sourcefile~~assert_s.f90~~EfferentGraph sourcefile~assert_s.f90 assert_s.F90 sourcefile~assert_m.f90 assert_m.F90 sourcefile~assert_s.f90->sourcefile~assert_m.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Submodules assert_s Source Code assert_s.F90 Source Code submodule ( assert_m ) assert_s implicit none contains module procedure assert if ( enforce_assertions ) then #ifdef XLF if (. not . assertion ) error stop 999 #else if (. not . assertion ) error stop description #endif end if end procedure end submodule assert_s","tags":"","loc":"sourcefile/assert_s.f90.html"},{"title":"sp_smart_pointer_s.F90 – ","text":"This file depends on sourcefile~~sp_smart_pointer_s.f90~~EfferentGraph sourcefile~sp_smart_pointer_s.f90 sp_smart_pointer_s.F90 sourcefile~sp_smart_pointer_m.f90 sp_smart_pointer_m.f90 sourcefile~sp_smart_pointer_s.f90->sourcefile~sp_smart_pointer_m.f90 sourcefile~sp_resource_m.f90 sp_resource_m.f90 sourcefile~sp_smart_pointer_m.f90->sourcefile~sp_resource_m.f90 sourcefile~sp_reference_counter_m.f90 sp_reference_counter_m.f90 sourcefile~sp_smart_pointer_m.f90->sourcefile~sp_reference_counter_m.f90 sourcefile~sp_reference_counter_m.f90->sourcefile~sp_resource_m.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Submodules sp_smart_pointer_s Source Code sp_smart_pointer_s.F90 Source Code submodule ( sp_smart_pointer_m ) sp_smart_pointer_s #ifdef XLF use sp_reference_counter_m , only : sp_reference_counter_t #endif implicit none contains module procedure reference_count counter = self % counter % reference_count () end procedure module procedure release_handle call self % counter % release end procedure module procedure start_counter self % counter = sp_reference_counter_t ( self ) end procedure end submodule","tags":"","loc":"sourcefile/sp_smart_pointer_s.f90.html"},{"title":"sp_resource_m.f90 – ","text":"Files dependent on this one sourcefile~~sp_resource_m.f90~~AfferentGraph sourcefile~sp_resource_m.f90 sp_resource_m.f90 sourcefile~sp_smart_pointer_m.f90 sp_smart_pointer_m.f90 sourcefile~sp_smart_pointer_m.f90->sourcefile~sp_resource_m.f90 sourcefile~sp_reference_counter_m.f90 sp_reference_counter_m.f90 sourcefile~sp_smart_pointer_m.f90->sourcefile~sp_reference_counter_m.f90 sourcefile~sp_reference_counter_m.f90->sourcefile~sp_resource_m.f90 sourcefile~smart_pointer_m.f90 smart_pointer_m.f90 sourcefile~smart_pointer_m.f90->sourcefile~sp_smart_pointer_m.f90 sourcefile~sp_reference_counter_s.f90 sp_reference_counter_s.f90 sourcefile~sp_reference_counter_s.f90->sourcefile~sp_reference_counter_m.f90 sourcefile~sp_smart_pointer_s.f90 sp_smart_pointer_s.F90 sourcefile~sp_smart_pointer_s.f90->sourcefile~sp_smart_pointer_m.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Modules sp_resource_m Source Code sp_resource_m.f90 Source Code module sp_resource_m implicit none private public :: sp_resource_t type , abstract :: sp_resource_t contains procedure ( free_interface ), deferred :: free end type abstract interface subroutine free_interface ( self ) import sp_resource_t class ( sp_resource_t ), intent ( inout ) :: self end subroutine end interface end module","tags":"","loc":"sourcefile/sp_resource_m.f90.html"},{"title":"sp_reference_counter_m.f90 – ","text":"This file depends on sourcefile~~sp_reference_counter_m.f90~~EfferentGraph sourcefile~sp_reference_counter_m.f90 sp_reference_counter_m.f90 sourcefile~sp_resource_m.f90 sp_resource_m.f90 sourcefile~sp_reference_counter_m.f90->sourcefile~sp_resource_m.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Files dependent on this one sourcefile~~sp_reference_counter_m.f90~~AfferentGraph sourcefile~sp_reference_counter_m.f90 sp_reference_counter_m.f90 sourcefile~sp_smart_pointer_m.f90 sp_smart_pointer_m.f90 sourcefile~sp_smart_pointer_m.f90->sourcefile~sp_reference_counter_m.f90 sourcefile~sp_reference_counter_s.f90 sp_reference_counter_s.f90 sourcefile~sp_reference_counter_s.f90->sourcefile~sp_reference_counter_m.f90 sourcefile~smart_pointer_m.f90 smart_pointer_m.f90 sourcefile~smart_pointer_m.f90->sourcefile~sp_smart_pointer_m.f90 sourcefile~sp_smart_pointer_s.f90 sp_smart_pointer_s.F90 sourcefile~sp_smart_pointer_s.f90->sourcefile~sp_smart_pointer_m.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Modules sp_reference_counter_m Source Code sp_reference_counter_m.f90 Source Code module sp_reference_counter_m use sp_resource_m , only : sp_resource_t implicit none private public :: sp_reference_counter_t type sp_reference_counter_t private integer , pointer :: count_ => null () class ( sp_resource_t ), pointer :: object_ => null () contains procedure :: reference_count procedure , non_overridable :: grab procedure , non_overridable :: release procedure :: assign_sp_reference_counter generic :: assignment ( = ) => assign_sp_reference_counter final :: finalize end type interface sp_reference_counter_t module function construct ( object ) result ( sp_reference_counter ) implicit none class ( sp_resource_t ), intent ( in ) :: object type ( sp_reference_counter_t ) sp_reference_counter end function end interface interface pure module function reference_count ( self ) result ( counter ) implicit none class ( sp_reference_counter_t ), intent ( in ) :: self integer counter end function module subroutine grab ( self ) implicit none class ( sp_reference_counter_t ), intent ( inout ) :: self end subroutine module subroutine release ( self ) implicit none class ( sp_reference_counter_t ), intent ( inout ) :: self end subroutine module subroutine assign_sp_reference_counter ( lhs , rhs ) implicit none class ( sp_reference_counter_t ), intent ( inout ) :: lhs class ( sp_reference_counter_t ), intent ( in ) :: rhs end subroutine end interface contains subroutine finalize ( self ) type ( sp_reference_counter_t ), intent ( inout ) :: self if ( associated ( self % count_ )) call self % release end subroutine end module sp_reference_counter_m","tags":"","loc":"sourcefile/sp_reference_counter_m.f90.html"},{"title":"assert_m.F90 – ","text":"Files dependent on this one sourcefile~~assert_m.f90~~AfferentGraph sourcefile~assert_m.f90 assert_m.F90 sourcefile~assert_s.f90 assert_s.F90 sourcefile~assert_s.f90->sourcefile~assert_m.f90 sourcefile~sp_reference_counter_s.f90 sp_reference_counter_s.f90 sourcefile~sp_reference_counter_s.f90->sourcefile~assert_m.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Modules assert_m Source Code assert_m.F90 Source Code module assert_m !! Enforce logical assertions that can be toggled on/off at compile-time !! To turn off assertions, building with the flag -DUSE_ASSERTIONS=.false. implicit none private public :: assert #ifndef USE_ASSERTIONS # define USE_ASSERTIONS .true. #endif logical , parameter :: enforce_assertions = USE_ASSERTIONS interface pure module subroutine assert ( assertion , description ) !! Error terminate on .false. assertion with the stop code given by description !! With IBM XL Fortran, the stop code is an integer due to for character stop codes being unsupported. implicit none logical , intent ( in ) :: assertion character ( len =* ), intent ( in ) :: description end subroutine end interface end module assert_m","tags":"","loc":"sourcefile/assert_m.f90.html"},{"title":"sp_reference_counter_s.f90 – ","text":"This file depends on sourcefile~~sp_reference_counter_s.f90~~EfferentGraph sourcefile~sp_reference_counter_s.f90 sp_reference_counter_s.f90 sourcefile~sp_reference_counter_m.f90 sp_reference_counter_m.f90 sourcefile~sp_reference_counter_s.f90->sourcefile~sp_reference_counter_m.f90 sourcefile~assert_m.f90 assert_m.F90 sourcefile~sp_reference_counter_s.f90->sourcefile~assert_m.f90 sourcefile~sp_resource_m.f90 sp_resource_m.f90 sourcefile~sp_reference_counter_m.f90->sourcefile~sp_resource_m.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Submodules sp_reference_counter_s Source Code sp_reference_counter_s.f90 Source Code submodule ( sp_reference_counter_m ) sp_reference_counter_s use assert_m , only : assert implicit none contains module procedure reference_count call assert ( associated ( self % count_ ), \"sp_reference_counter_t%grab: associated(self%count_)\" ) counter = self % count_ end procedure module procedure construct allocate ( sp_reference_counter % count_ , source = 0 ) allocate ( sp_reference_counter % object_ , source = object ) call sp_reference_counter % grab end procedure module procedure grab call assert ( associated ( self % count_ ), \"sp_reference_counter_t%grab: associated(self%count_)\" ) self % count_ = self % count_ + 1 end procedure module procedure release call assert ( associated ( self % count_ ), \"sp_reference_counter_t%grab: associated(self%count_)\" ) self % count_ = self % count_ - 1 if ( self % count_ == 0 ) then call self % object_ % free deallocate ( self % count_ , self % object_ ) else self % count_ => null () self % object_ => null () end if end procedure module procedure assign_sp_reference_counter lhs % count_ => rhs % count_ lhs % object_ => rhs % object_ call lhs % grab end procedure end submodule sp_reference_counter_s","tags":"","loc":"sourcefile/sp_reference_counter_s.f90.html"},{"title":"sp_smart_pointer_m.f90 – ","text":"This file depends on sourcefile~~sp_smart_pointer_m.f90~~EfferentGraph sourcefile~sp_smart_pointer_m.f90 sp_smart_pointer_m.f90 sourcefile~sp_resource_m.f90 sp_resource_m.f90 sourcefile~sp_smart_pointer_m.f90->sourcefile~sp_resource_m.f90 sourcefile~sp_reference_counter_m.f90 sp_reference_counter_m.f90 sourcefile~sp_smart_pointer_m.f90->sourcefile~sp_reference_counter_m.f90 sourcefile~sp_reference_counter_m.f90->sourcefile~sp_resource_m.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Files dependent on this one sourcefile~~sp_smart_pointer_m.f90~~AfferentGraph sourcefile~sp_smart_pointer_m.f90 sp_smart_pointer_m.f90 sourcefile~smart_pointer_m.f90 smart_pointer_m.f90 sourcefile~smart_pointer_m.f90->sourcefile~sp_smart_pointer_m.f90 sourcefile~sp_smart_pointer_s.f90 sp_smart_pointer_s.F90 sourcefile~sp_smart_pointer_s.f90->sourcefile~sp_smart_pointer_m.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Modules sp_smart_pointer_m Source Code sp_smart_pointer_m.f90 Source Code module sp_smart_pointer_m use sp_resource_m , only : sp_resource_t use sp_reference_counter_m , only : sp_reference_counter_t implicit none private public :: sp_smart_pointer_t type , abstract , extends ( sp_resource_t ) :: sp_smart_pointer_t private type ( sp_reference_counter_t ) :: counter contains procedure :: reference_count procedure , non_overridable :: release_handle procedure , non_overridable :: start_counter end type interface pure module function reference_count ( self ) result ( counter ) implicit none class ( sp_smart_pointer_t ), intent ( in ) :: self integer counter end function module subroutine release_handle ( self ) implicit none class ( sp_smart_pointer_t ), intent ( inout ) :: self end subroutine module subroutine start_counter ( self ) implicit none class ( sp_smart_pointer_t ), intent ( inout ) :: self end subroutine end interface end module sp_smart_pointer_m","tags":"","loc":"sourcefile/sp_smart_pointer_m.f90.html"}]}