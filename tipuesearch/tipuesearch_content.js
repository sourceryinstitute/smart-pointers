var tipuesearch = {"pages":[{"title":" ","text":"Reference Counter __________        _____                                          \n\\______   \\ _____/ ____\\___________   ____   ____   ____  ____   \n |       _// __ \\   __\\/ __ \\_  __ \\_/ __ \\ /    \\_/ ___\\/ __ \\  \n |    |   \\  ___/|  | \\  ___/|  | \\/\\  ___/|   |  \\  \\__\\  ___/  \n |____|_  /\\___> |__|  \\___> |__|    \\___> |___|  /\\____>\\___>\n                                                \\/            \n _________                      __\n \\_   ___ \\  ____  __ __  _____/  |_  ___________\n /    \\  \\/ /  _ \\|  |  \\/    \\   __\\/ __ \\_  __ \\\n \\     \\___(  <_> )  |  /   |  \\  | \\  ___/|  | \\/\n  \\_______/ \\____/|____/|___|  /__|  \\___>  __|\n                             \\/ Overview Reference Counter offers semi-automatic counting of references to program resources\nsuch as memory.  A user accesses the provided reference-counting capability simply\nby defining a non-abstract derived type that Extends Reference Counter's ref_reference_t type and Implements the so-inherited free deferred binding. Because the reference-counting algorithm involves copying references in certain\ncircumstances, the user type that extends s ref_reference_t should be a lightweight\nproxy for a more stateful entity stored elsewhere.  For example, the user type might \ncontain a Fortran pointer associated with some other object or it might contain\na \"shadow\" object that serves as an identity tag for a larger object allocated \n(and later freed) in C or C++ at the direction of the user's free procedure. For more background on the design philosophy and the internal mechanics of Reference\nCounter, see Rouson et al. (see 1 , 2 , 3 ).  This repository's code\noriginated from refactoring the code in those publications to use more descriptive\nand more general nomenclature and more up-to-date coding conventions.  For example,\nthis repository separates interface bodies into modules and procedure definitions\ninto submodules. As compared to the original code, this repository also adds\n1. A Fortran Package Manager build system,\n2. Tests based on the Vegetables unit-testing software,\n3. Documentation generated by [ ford ] and deployed to the web via GitHub Actions, and\n4. Quality control via continuous integration testing using GitHub Actions. Documentation See Reference Counter's GitHub Pages site for HTML documentation generated with [ ford ]. See the doc/ subdirectory for a PlantUML script that generates the Unified Modeling Langauge (UML) class diagram below of the three derived types in reference-counter. The above image was created with the PlantuML package in the Atom editor. Compiler Status Correct execution of the Reference Counter library code requires comprehensive\ncompiler support for Fortran's type finalization semantics.  The unit test suite\nincludes compiler standard-conformance tests.  We have attempted to include at least\none example of each scenario in which the Fortran 2018 standard requires compilers\nto finalize objects.  The table below summarizes the observed compiler behaviors: Compiler Test failures Version tested NAG 0 nagfor 7.1 Build 7113 GCC 6 gfortran 12.2.0 Intel 2 ifort 2021.5.0 Build 20211109_000000 NVIDIA Fails to build (ICE) nvfortran 2022.2 AMD Fails to build (ICE) flang 13.0.0 (AOCC_3.2.0-Build#128 2021_11_12) See the test suite README.md for more details on each compiler's test\nfailures. Downloading, Building, and Testing On Linux, macOS, or Windows Subsystem for Linux, download, build, and test with\nthe following shell commands: git clone git @github . com : sourceryinstitute / reference - counter cd reference - counter followed by one of the commands below depending on your compiler choice. GCC ( gfortran ) fpm test Numerical Algorithms Group ( nagfor ) fpm test --compiler nagfor --flag -fpp Intel ( ifort ) fpm test --compiler ifort --flag -coarray=shared NVIDIA ( nvfortran ) fpm test --compiler nvfortran --flag -Mpreprocess AMD ( flang ) fpm test --compiler flang --flag -cpp Developer Info Sourcery Institute","tags":"home","loc":"index.html"},{"title":"ref_reference_t –  ","text":"type, public, abstract, extends( ref_resource_t ) :: ref_reference_t Inherits type~~ref_reference_t~~InheritsGraph type~ref_reference_t ref_reference_t type~ref_counter_t ref_counter_t type~ref_reference_t->type~ref_counter_t ref_counter type~ref_resource_t ref_resource_t type~ref_reference_t->type~ref_resource_t type~ref_counter_t->type~ref_resource_t object_ Help × Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from a derived type to the parent type which it\n    extends. Dashed arrows point from a derived type to the other\n    types it contains as a components, with a label listing the name(s) of\n    said component(s). Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Variables ref_counter Type-Bound Procedures free release_handle start_ref_counter Components Type Visibility Attributes Name Initial type( ref_counter_t ), private :: ref_counter Type-Bound Procedures procedure( free_interface ), public, deferred :: free subroutine free_interface(self) Prototype Arguments Type Intent Optional Attributes Name class( ref_resource_t ), intent(inout) :: self procedure, public, non_overridable :: release_handle interface private module module subroutine release_handle(self) Implementation → Arguments Type Intent Optional Attributes Name class( ref_reference_t ), intent(inout) :: self procedure, public, non_overridable :: start_ref_counter interface private module module subroutine start_ref_counter(self) Implementation → Arguments Type Intent Optional Attributes Name class( ref_reference_t ), intent(inout) :: self","tags":"","loc":"type/ref_reference_t.html"},{"title":"ref_counter_t –  ","text":"type, public :: ref_counter_t Inherits type~~ref_counter_t~~InheritsGraph type~ref_counter_t ref_counter_t type~ref_resource_t ref_resource_t type~ref_counter_t->type~ref_resource_t object_ Help × Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from a derived type to the parent type which it\n    extends. Dashed arrows point from a derived type to the other\n    types it contains as a components, with a label listing the name(s) of\n    said component(s). Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Inherited by type~~ref_counter_t~~InheritedByGraph type~ref_counter_t ref_counter_t type~ref_reference_t ref_reference_t type~ref_reference_t->type~ref_counter_t ref_counter Help × Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from a derived type to the parent type which it\n    extends. Dashed arrows point from a derived type to the other\n    types it contains as a components, with a label listing the name(s) of\n    said component(s). Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Variables count_ object_ Constructor ref_counter_t Finalization Procedures finalize Type-Bound Procedures assign_ref_counter assignment(=) grab release Components Type Visibility Attributes Name Initial integer, private, pointer :: count_ => null() class( ref_resource_t ), private, pointer :: object_ => null() Constructor public interface ref_counter_t private module function construct(object) result(ref_counter) Arguments Type Intent Optional Attributes Name class( ref_resource_t ), intent(in) :: object Return Value type( ref_counter_t ) Finalization Procedures final :: finalize private subroutine finalize (self) Arguments Type Intent Optional Attributes Name type( ref_counter_t ), intent(inout) :: self Type-Bound Procedures procedure, public :: assign_ref_counter interface private module module subroutine assign_ref_counter(lhs, rhs) Implementation → Arguments Type Intent Optional Attributes Name class( ref_counter_t ), intent(inout) :: lhs class( ref_counter_t ), intent(in) :: rhs generic, public :: assignment(=) => assign_ref_counter private interface assign_ref_counter () Arguments None procedure, public, non_overridable :: grab interface private module module subroutine grab(self) Implementation → Arguments Type Intent Optional Attributes Name class( ref_counter_t ), intent(inout) :: self procedure, public, non_overridable :: release interface private module module subroutine release(self) Implementation → Arguments Type Intent Optional Attributes Name class( ref_counter_t ), intent(inout) :: self","tags":"","loc":"type/ref_counter_t.html"},{"title":"ref_resource_t –  ","text":"type, public, abstract :: ref_resource_t Inherited by type~~ref_resource_t~~InheritedByGraph type~ref_resource_t ref_resource_t type~ref_counter_t ref_counter_t type~ref_counter_t->type~ref_resource_t object_ type~ref_reference_t ref_reference_t type~ref_reference_t->type~ref_resource_t type~ref_reference_t->type~ref_counter_t ref_counter Help × Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from a derived type to the parent type which it\n    extends. Dashed arrows point from a derived type to the other\n    types it contains as a components, with a label listing the name(s) of\n    said component(s). Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Type-Bound Procedures free Type-Bound Procedures procedure( free_interface ), public, deferred :: free subroutine free_interface(self) Prototype Arguments Type Intent Optional Attributes Name class( ref_resource_t ), intent(inout) :: self","tags":"","loc":"type/ref_resource_t.html"},{"title":"free_interface – ","text":"abstract interface private subroutine free_interface(self) Arguments Type Intent Optional Attributes Name class( ref_resource_t ), intent(inout) :: self","tags":"","loc":"interface/free_interface.html"},{"title":"release_handle – ","text":"interface Calls interface~~release_handle~~CallsGraph interface~release_handle release_handle proc~release_handle release_handle interface~release_handle->proc~release_handle Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. private module module subroutine release_handle(self) Implementation → Arguments Type Intent Optional Attributes Name class( ref_reference_t ), intent(inout) :: self","tags":"","loc":"interface/release_handle.html"},{"title":"start_ref_counter – ","text":"interface Calls interface~~start_ref_counter~~CallsGraph interface~start_ref_counter start_ref_counter proc~start_ref_counter start_ref_counter interface~start_ref_counter->proc~start_ref_counter Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. private module module subroutine start_ref_counter(self) Implementation → Arguments Type Intent Optional Attributes Name class( ref_reference_t ), intent(inout) :: self","tags":"","loc":"interface/start_ref_counter.html"},{"title":"finalize – ","text":"private subroutine finalize(self) Arguments Type Intent Optional Attributes Name type( ref_counter_t ), intent(inout) :: self Contents None","tags":"","loc":"proc/finalize.html"},{"title":"ref_counter_t – ","text":"public interface ref_counter_t Contents Functions construct Functions private module function construct(object) result(ref_counter) Arguments Type Intent Optional Attributes Name class( ref_resource_t ), intent(in) :: object Return Value type( ref_counter_t )","tags":"","loc":"interface/ref_counter_t.html"},{"title":"assign_ref_counter – ","text":"interface Calls interface~~assign_ref_counter~~CallsGraph interface~assign_ref_counter assign_ref_counter proc~assign_ref_counter assign_ref_counter interface~assign_ref_counter->proc~assign_ref_counter Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. private module module subroutine assign_ref_counter(lhs, rhs) Implementation → Arguments Type Intent Optional Attributes Name class( ref_counter_t ), intent(inout) :: lhs class( ref_counter_t ), intent(in) :: rhs","tags":"","loc":"interface/assign_ref_counter.html"},{"title":"grab – ","text":"interface Calls interface~~grab~~CallsGraph interface~grab grab proc~grab grab interface~grab->proc~grab assert assert proc~grab->assert Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. private module module subroutine grab(self) Implementation → Arguments Type Intent Optional Attributes Name class( ref_counter_t ), intent(inout) :: self","tags":"","loc":"interface/grab.html"},{"title":"release – ","text":"interface Calls interface~~release~~CallsGraph interface~release release proc~release release interface~release->proc~release assert assert proc~release->assert Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. private module module subroutine release(self) Implementation → Arguments Type Intent Optional Attributes Name class( ref_counter_t ), intent(inout) :: self","tags":"","loc":"interface/release.html"},{"title":"release_handle – ","text":"module procedure release_handle module module subroutine release_handle(self) Interface → Arguments Type Intent Optional Attributes Name class( ref_reference_t ), intent(inout) :: self Called by proc~~release_handle~~CalledByGraph proc~release_handle release_handle interface~release_handle release_handle interface~release_handle->proc~release_handle Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/release_handle.html"},{"title":"start_ref_counter – ","text":"module procedure start_ref_counter module module subroutine start_ref_counter(self) Interface → Arguments Type Intent Optional Attributes Name class( ref_reference_t ), intent(inout) :: self Called by proc~~start_ref_counter~~CalledByGraph proc~start_ref_counter start_ref_counter interface~start_ref_counter start_ref_counter interface~start_ref_counter->proc~start_ref_counter Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/start_ref_counter.html"},{"title":"assign_ref_counter – ","text":"module procedure assign_ref_counter module module subroutine assign_ref_counter(lhs, rhs) Interface → Arguments Type Intent Optional Attributes Name class( ref_counter_t ), intent(inout) :: lhs class( ref_counter_t ), intent(in) :: rhs Called by proc~~assign_ref_counter~~CalledByGraph proc~assign_ref_counter assign_ref_counter interface~assign_ref_counter assign_ref_counter interface~assign_ref_counter->proc~assign_ref_counter Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/assign_ref_counter.html"},{"title":"construct – ","text":"module procedure construct module procedure construct() Arguments None Contents None","tags":"","loc":"proc/construct.html"},{"title":"grab – ","text":"module procedure grab module module subroutine grab(self) Interface → Arguments Type Intent Optional Attributes Name class( ref_counter_t ), intent(inout) :: self Calls proc~~grab~~CallsGraph proc~grab grab assert assert proc~grab->assert Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Called by proc~~grab~~CalledByGraph proc~grab grab interface~grab grab interface~grab->proc~grab Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/grab.html"},{"title":"release – ","text":"module procedure release module module subroutine release(self) Interface → Arguments Type Intent Optional Attributes Name class( ref_counter_t ), intent(inout) :: self Calls proc~~release~~CallsGraph proc~release release assert assert proc~release->assert Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Called by proc~~release~~CalledByGraph proc~release release interface~release release interface~release->proc~release Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/release.html"},{"title":"reference_counter_m – ","text":"Uses ref_reference_m module~~reference_counter_m~~UsesGraph module~reference_counter_m reference_counter_m module~ref_reference_m ref_reference_m module~reference_counter_m->module~ref_reference_m module~ref_counter_m ref_counter_m module~ref_reference_m->module~ref_counter_m module~ref_resource_m ref_resource_m module~ref_reference_m->module~ref_resource_m module~ref_counter_m->module~ref_resource_m Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"module/reference_counter_m.html"},{"title":"ref_reference_m – ","text":"Uses ref_counter_m ref_resource_m module~~ref_reference_m~~UsesGraph module~ref_reference_m ref_reference_m module~ref_counter_m ref_counter_m module~ref_reference_m->module~ref_counter_m module~ref_resource_m ref_resource_m module~ref_reference_m->module~ref_resource_m module~ref_counter_m->module~ref_resource_m Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Used by Descendants: ref_reference_s module~~ref_reference_m~~UsedByGraph module~ref_reference_m ref_reference_m module~reference_counter_m reference_counter_m module~reference_counter_m->module~ref_reference_m module~ref_reference_s ref_reference_s module~ref_reference_s->module~ref_reference_m Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Interfaces release_handle start_ref_counter Derived Types ref_reference_t Interfaces interface private module module subroutine release_handle(self) Implementation → Arguments Type Intent Optional Attributes Name class( ref_reference_t ), intent(inout) :: self interface private module module subroutine start_ref_counter(self) Implementation → Arguments Type Intent Optional Attributes Name class( ref_reference_t ), intent(inout) :: self Derived Types type, public, abstract, extends( ref_resource_t ) :: ref_reference_t Components Type Visibility Attributes Name Initial type( ref_counter_t ), private :: ref_counter Type-Bound Procedures procedure(free_interface), public :: free procedure, public, non_overridable :: release_handle procedure, public, non_overridable :: start_ref_counter","tags":"","loc":"module/ref_reference_m.html"},{"title":"ref_counter_m – ","text":"Uses ref_resource_m module~~ref_counter_m~~UsesGraph module~ref_counter_m ref_counter_m module~ref_resource_m ref_resource_m module~ref_counter_m->module~ref_resource_m Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Used by Descendants: ref_counter_s module~~ref_counter_m~~UsedByGraph module~ref_counter_m ref_counter_m module~ref_reference_m ref_reference_m module~ref_reference_m->module~ref_counter_m module~ref_counter_s ref_counter_s module~ref_counter_s->module~ref_counter_m module~reference_counter_m reference_counter_m module~reference_counter_m->module~ref_reference_m module~ref_reference_s ref_reference_s module~ref_reference_s->module~ref_reference_m Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Interfaces ref_counter_t assign_ref_counter grab release Derived Types ref_counter_t Subroutines finalize Interfaces public interface ref_counter_t private module function construct(object) result(ref_counter) Arguments Type Intent Optional Attributes Name class( ref_resource_t ), intent(in) :: object Return Value type( ref_counter_t ) interface private module module subroutine assign_ref_counter(lhs, rhs) Implementation → Arguments Type Intent Optional Attributes Name class( ref_counter_t ), intent(inout) :: lhs class( ref_counter_t ), intent(in) :: rhs interface private module module subroutine grab(self) Implementation → Arguments Type Intent Optional Attributes Name class( ref_counter_t ), intent(inout) :: self interface private module module subroutine release(self) Implementation → Arguments Type Intent Optional Attributes Name class( ref_counter_t ), intent(inout) :: self Derived Types type, public :: ref_counter_t Components Type Visibility Attributes Name Initial integer, private, pointer :: count_ => null() class( ref_resource_t ), private, pointer :: object_ => null() Constructor private module function construct (object) Finalizations Procedures final :: finalize Type-Bound Procedures procedure, public :: assign_ref_counter generic, public :: assignment(=) => assign_ref_counter procedure, public, non_overridable :: grab procedure, public, non_overridable :: release Subroutines private subroutine finalize (self) Arguments Type Intent Optional Attributes Name type( ref_counter_t ), intent(inout) :: self","tags":"","loc":"module/ref_counter_m.html"},{"title":"ref_resource_m – ","text":"Used by module~~ref_resource_m~~UsedByGraph module~ref_resource_m ref_resource_m module~ref_counter_m ref_counter_m module~ref_counter_m->module~ref_resource_m module~ref_reference_m ref_reference_m module~ref_reference_m->module~ref_resource_m module~ref_reference_m->module~ref_counter_m module~ref_counter_s ref_counter_s module~ref_counter_s->module~ref_counter_m module~reference_counter_m reference_counter_m module~reference_counter_m->module~ref_reference_m module~ref_reference_s ref_reference_s module~ref_reference_s->module~ref_reference_m Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Abstract Interfaces free_interface Derived Types ref_resource_t Abstract Interfaces abstract interface private subroutine free_interface(self) Arguments Type Intent Optional Attributes Name class( ref_resource_t ), intent(inout) :: self Derived Types type, public, abstract :: ref_resource_t Type-Bound Procedures procedure(free_interface), public :: free","tags":"","loc":"module/ref_resource_m.html"},{"title":"ref_reference_s – ","text":"Uses Ancestors: ref_reference_m module~~ref_reference_s~~UsesGraph module~ref_reference_s ref_reference_s module~ref_reference_m ref_reference_m module~ref_reference_s->module~ref_reference_m module~ref_counter_m ref_counter_m module~ref_reference_m->module~ref_counter_m module~ref_resource_m ref_resource_m module~ref_reference_m->module~ref_resource_m module~ref_counter_m->module~ref_resource_m Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Module Procedures release_handle start_ref_counter Module Procedures module procedure release_handle module module subroutine release_handle(self) Interface → Arguments Type Intent Optional Attributes Name class( ref_reference_t ), intent(inout) :: self module procedure start_ref_counter module module subroutine start_ref_counter(self) Interface → Arguments Type Intent Optional Attributes Name class( ref_reference_t ), intent(inout) :: self","tags":"","loc":"module/ref_reference_s.html"},{"title":"ref_counter_s – ","text":"Uses assert_m Ancestors: ref_counter_m module~~ref_counter_s~~UsesGraph module~ref_counter_s ref_counter_s assert_m assert_m module~ref_counter_s->assert_m module~ref_counter_m ref_counter_m module~ref_counter_s->module~ref_counter_m module~ref_resource_m ref_resource_m module~ref_counter_m->module~ref_resource_m Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Module Procedures assign_ref_counter construct grab release Module Procedures module procedure assign_ref_counter module module subroutine assign_ref_counter(lhs, rhs) Interface → Arguments Type Intent Optional Attributes Name class( ref_counter_t ), intent(inout) :: lhs class( ref_counter_t ), intent(in) :: rhs module procedure construct module procedure construct() Arguments None module procedure grab module module subroutine grab(self) Interface → Arguments Type Intent Optional Attributes Name class( ref_counter_t ), intent(inout) :: self module procedure release module module subroutine release(self) Interface → Arguments Type Intent Optional Attributes Name class( ref_counter_t ), intent(inout) :: self","tags":"","loc":"module/ref_counter_s.html"},{"title":"reference_counter_m.f90 – ","text":"This file depends on sourcefile~~reference_counter_m.f90~~EfferentGraph sourcefile~reference_counter_m.f90 reference_counter_m.f90 sourcefile~ref_reference_m.f90 ref_reference_m.f90 sourcefile~reference_counter_m.f90->sourcefile~ref_reference_m.f90 sourcefile~ref_resource_m.f90 ref_resource_m.f90 sourcefile~ref_reference_m.f90->sourcefile~ref_resource_m.f90 sourcefile~ref_counter_m.f90 ref_counter_m.f90 sourcefile~ref_reference_m.f90->sourcefile~ref_counter_m.f90 sourcefile~ref_counter_m.f90->sourcefile~ref_resource_m.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Modules reference_counter_m Source Code reference_counter_m.f90 Source Code module reference_counter_m use ref_reference_m implicit none end module","tags":"","loc":"sourcefile/reference_counter_m.f90.html"},{"title":"ref_reference_s.f90 – ","text":"This file depends on sourcefile~~ref_reference_s.f90~~EfferentGraph sourcefile~ref_reference_s.f90 ref_reference_s.f90 sourcefile~ref_reference_m.f90 ref_reference_m.f90 sourcefile~ref_reference_s.f90->sourcefile~ref_reference_m.f90 sourcefile~ref_resource_m.f90 ref_resource_m.f90 sourcefile~ref_reference_m.f90->sourcefile~ref_resource_m.f90 sourcefile~ref_counter_m.f90 ref_counter_m.f90 sourcefile~ref_reference_m.f90->sourcefile~ref_counter_m.f90 sourcefile~ref_counter_m.f90->sourcefile~ref_resource_m.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Submodules ref_reference_s Source Code ref_reference_s.f90 Source Code submodule ( ref_reference_m ) ref_reference_s implicit none contains module procedure release_handle call self % ref_counter % release end procedure module procedure start_ref_counter self % ref_counter = ref_counter_t ( self ) end procedure end submodule","tags":"","loc":"sourcefile/ref_reference_s.f90.html"},{"title":"ref_reference_m.f90 – ","text":"This file depends on sourcefile~~ref_reference_m.f90~~EfferentGraph sourcefile~ref_reference_m.f90 ref_reference_m.f90 sourcefile~ref_resource_m.f90 ref_resource_m.f90 sourcefile~ref_reference_m.f90->sourcefile~ref_resource_m.f90 sourcefile~ref_counter_m.f90 ref_counter_m.f90 sourcefile~ref_reference_m.f90->sourcefile~ref_counter_m.f90 sourcefile~ref_counter_m.f90->sourcefile~ref_resource_m.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Files dependent on this one sourcefile~~ref_reference_m.f90~~AfferentGraph sourcefile~ref_reference_m.f90 ref_reference_m.f90 sourcefile~reference_counter_m.f90 reference_counter_m.f90 sourcefile~reference_counter_m.f90->sourcefile~ref_reference_m.f90 sourcefile~ref_reference_s.f90 ref_reference_s.f90 sourcefile~ref_reference_s.f90->sourcefile~ref_reference_m.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Modules ref_reference_m Source Code ref_reference_m.f90 Source Code module ref_reference_m use ref_resource_m , only : ref_resource_t use ref_counter_m , only : ref_counter_t implicit none private public :: ref_reference_t type , abstract , extends ( ref_resource_t ) :: ref_reference_t type ( ref_counter_t ) :: ref_counter contains procedure , non_overridable :: release_handle procedure , non_overridable :: start_ref_counter end type interface module subroutine release_handle ( self ) implicit none class ( ref_reference_t ), intent ( inout ) :: self end subroutine module subroutine start_ref_counter ( self ) implicit none class ( ref_reference_t ), intent ( inout ) :: self end subroutine end interface end module ref_reference_m","tags":"","loc":"sourcefile/ref_reference_m.f90.html"},{"title":"ref_counter_m.f90 – ","text":"This file depends on sourcefile~~ref_counter_m.f90~~EfferentGraph sourcefile~ref_counter_m.f90 ref_counter_m.f90 sourcefile~ref_resource_m.f90 ref_resource_m.f90 sourcefile~ref_counter_m.f90->sourcefile~ref_resource_m.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Files dependent on this one sourcefile~~ref_counter_m.f90~~AfferentGraph sourcefile~ref_counter_m.f90 ref_counter_m.f90 sourcefile~ref_reference_m.f90 ref_reference_m.f90 sourcefile~ref_reference_m.f90->sourcefile~ref_counter_m.f90 sourcefile~ref_counter_s.f90 ref_counter_s.f90 sourcefile~ref_counter_s.f90->sourcefile~ref_counter_m.f90 sourcefile~reference_counter_m.f90 reference_counter_m.f90 sourcefile~reference_counter_m.f90->sourcefile~ref_reference_m.f90 sourcefile~ref_reference_s.f90 ref_reference_s.f90 sourcefile~ref_reference_s.f90->sourcefile~ref_reference_m.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Modules ref_counter_m Source Code ref_counter_m.f90 Source Code module ref_counter_m use ref_resource_m , only : ref_resource_t implicit none private public :: ref_counter_t type ref_counter_t private integer , pointer :: count_ => null () class ( ref_resource_t ), pointer :: object_ => null () contains procedure , non_overridable :: grab procedure , non_overridable :: release procedure :: assign_ref_counter generic :: assignment ( = ) => assign_ref_counter final :: finalize end type interface ref_counter_t module function construct ( object ) result ( ref_counter ) implicit none class ( ref_resource_t ), intent ( in ) :: object type ( ref_counter_t ) ref_counter end function end interface interface module subroutine grab ( self ) implicit none class ( ref_counter_t ), intent ( inout ) :: self end subroutine module subroutine release ( self ) implicit none class ( ref_counter_t ), intent ( inout ) :: self end subroutine module subroutine assign_ref_counter ( lhs , rhs ) implicit none class ( ref_counter_t ), intent ( inout ) :: lhs class ( ref_counter_t ), intent ( in ) :: rhs end subroutine end interface contains subroutine finalize ( self ) type ( ref_counter_t ), intent ( inout ) :: self if ( associated ( self % count_ )) call self % release end subroutine end module ref_counter_m","tags":"","loc":"sourcefile/ref_counter_m.f90.html"},{"title":"ref_counter_s.f90 – ","text":"This file depends on sourcefile~~ref_counter_s.f90~~EfferentGraph sourcefile~ref_counter_s.f90 ref_counter_s.f90 sourcefile~ref_counter_m.f90 ref_counter_m.f90 sourcefile~ref_counter_s.f90->sourcefile~ref_counter_m.f90 sourcefile~ref_resource_m.f90 ref_resource_m.f90 sourcefile~ref_counter_m.f90->sourcefile~ref_resource_m.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Submodules ref_counter_s Source Code ref_counter_s.f90 Source Code submodule ( ref_counter_m ) ref_counter_s use assert_m , only : assert implicit none contains module procedure construct allocate ( ref_counter % count_ , source = 0 ) allocate ( ref_counter % object_ , source = object ) call ref_counter % grab end procedure module procedure grab call assert ( associated ( self % count_ ), \"ref_counter_t%grab: associated(self%count_)\" ) self % count_ = self % count_ + 1 end procedure module procedure release call assert ( associated ( self % count_ ), \"ref_counter_t%grab: associated(self%count_)\" ) self % count_ = self % count_ - 1 if ( self % count_ == 0 ) then call self % object_ % free deallocate ( self % count_ , self % object_ ) else self % count_ => null () self % object_ => null () end if end procedure module procedure assign_ref_counter lhs % count_ => rhs % count_ lhs % object_ => rhs % object_ call lhs % grab end procedure end submodule ref_counter_s","tags":"","loc":"sourcefile/ref_counter_s.f90.html"},{"title":"ref_resource_m.f90 – ","text":"Files dependent on this one sourcefile~~ref_resource_m.f90~~AfferentGraph sourcefile~ref_resource_m.f90 ref_resource_m.f90 sourcefile~ref_reference_m.f90 ref_reference_m.f90 sourcefile~ref_reference_m.f90->sourcefile~ref_resource_m.f90 sourcefile~ref_counter_m.f90 ref_counter_m.f90 sourcefile~ref_reference_m.f90->sourcefile~ref_counter_m.f90 sourcefile~ref_counter_m.f90->sourcefile~ref_resource_m.f90 sourcefile~reference_counter_m.f90 reference_counter_m.f90 sourcefile~reference_counter_m.f90->sourcefile~ref_reference_m.f90 sourcefile~ref_reference_s.f90 ref_reference_s.f90 sourcefile~ref_reference_s.f90->sourcefile~ref_reference_m.f90 sourcefile~ref_counter_s.f90 ref_counter_s.f90 sourcefile~ref_counter_s.f90->sourcefile~ref_counter_m.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Modules ref_resource_m Source Code ref_resource_m.f90 Source Code module ref_resource_m implicit none private public :: ref_resource_t type , abstract :: ref_resource_t contains procedure ( free_interface ), deferred :: free end type abstract interface subroutine free_interface ( self ) import ref_resource_t class ( ref_resource_t ), intent ( inout ) :: self end subroutine end interface end module","tags":"","loc":"sourcefile/ref_resource_m.f90.html"}]}